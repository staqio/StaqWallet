// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StaqWallet
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import Combine
import CommonCrypto
import DeveloperToolsSupport
import DotCore
import DotDocument
import DotFaceBackgroundUniformity
import DotFaceCore
import DotFaceDetectionFast
import DotFaceExpressionNeutral
import Foundation
import LocalAuthentication
import NetworkExtension
@_exported import StaqWallet
import Swift
import SwiftUI
import SystemConfiguration
import TrustlessSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum StaqWalletEnvironment {
  case development
  case production
  public static func == (a: StaqWallet.StaqWalletEnvironment, b: StaqWallet.StaqWalletEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}



public struct StaqWalletConfig {
  public init(userId: Swift.String, secret: Swift.String, email: Swift.String? = nil, mobileNumber: Swift.String? = nil, language: StaqWallet.SupportedLanguage, googleMapsApiKey: Swift.String = "", walletEnv: StaqWallet.StaqWalletEnvironment = .production)
}




public enum SupportedLanguage : Swift.String {
  case en
  case ar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}





extension TrustlessSDK.TrustlessError : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.TrustlessError, rhs: TrustlessSDK.TrustlessError) -> Swift.Bool
}
extension TrustlessSDK.Card : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
extension TrustlessSDK.CardTransaction : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}
extension TrustlessSDK.TrustlessError : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@_hasMissingDesignatedInitializers public class KYCUploder {
  public func uploadFile(document: Foundation.URL) throws -> Foundation.URL
  public func uploadFileAsync(document: Foundation.URL, completion: @escaping (Swift.Result<Foundation.URL, StaqWallet.BaeError>) -> Swift.Void)
  public func uploadBase64(encoded: Swift.String, fileExtension: Swift.String) throws -> Foundation.URL
  @objc deinit
}
public let KYCUploaderInstance: StaqWallet.KYCUploder
@_hasMissingDesignatedInitializers public class Document {
  final public let url: Foundation.URL
  final public let name: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class KycSDKApi {
  public var sdkErrors: StaqWallet.KycSDKErrors {
    get
  }
  public var sdkState: StaqWallet.KycSDKState {
    get
  }
  public func similarity() throws -> Swift.Bool
  public func similarityAsync(completion: @escaping (Swift.Result<Swift.Bool, StaqWallet.BaeError>) -> Swift.Void)
  public func getSelfiePhoto() throws -> StaqWallet.ImageCrop
  public func getDocumentPortrait() throws -> StaqWallet.ImageCrop
  public func getDocumentPortraitAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentBackCrop() throws -> StaqWallet.ImageCrop
  public func getDocumentBackCropAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentFrontCrop() throws -> StaqWallet.ImageCrop
  public func getDocumentFrontCropAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentFields() throws -> StaqWallet.GetCustomerResponse
  public func getDocument() throws -> StaqWallet.KYCDocumentData
  public func getDocumentFieldsAsync(completion: @escaping (Swift.Result<StaqWallet.GetCustomerResponse, StaqWallet.BaeError>) -> Swift.Void)
  public func inspectDocuments() throws -> StaqWallet.DocumentInspectionResponse
  public func inspectDocumentsAsync(completion: @escaping (Swift.Result<StaqWallet.DocumentInspectionResponse, StaqWallet.BaeError>) -> Swift.Void)
  public func awaitForQueueToFinish()
  public func removeCustomerID()
  @objc deinit
}
public let KYCApiInstance: StaqWallet.KycSDKApi
public struct KycSDKErrors {
  public var frontScanError: StaqWallet.BaeError?
  public var backScanError: StaqWallet.BaeError?
  public var selfieCaptureError: StaqWallet.BaeError?
  public var initializationError: StaqWallet.BaeError?
}
public struct KycSDKState {
  public var frontScan: Foundation.Data?
  public var backScan: Foundation.Data?
  public var selfieScan: Foundation.Data?
  public var video: Foundation.URL?
}
public struct KYCDocumentData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}






@_hasMissingDesignatedInitializers public class BaeError : Foundation.LocalizedError {
  final public var code: StaqWallet.BaeErrorCodes
  final public var message: Swift.String
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
public enum BaeErrorCodes {
  case UNKNOWN_ERROR
  case NO_FILE_SELECTED
  case CAMERA_NOT_FOUND
  case NOT_ABLE_TO_RECORD_VIDEO
  case NOT_ABLE_TO_READ_FILE
  case NOT_ABLE_TO_MAKE_REQUEST
  case VIDEO_EXCEEDS_LENGTH
  case NOT_INITIALIZED
  case NO_CARD_CORNERS_DETECTED
  case PAGE_DOESNT_MATCH_DOCUMENT_TYPE_OF_PREVIOUS_PAGE
  case NO_FACE_FOUND
  case USER_DID_NOT_SCAN_HIS_FACE
  case TIMEOUT
  case CANCELED
  public static func == (a: StaqWallet.BaeErrorCodes, b: StaqWallet.BaeErrorCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

extension DotFaceCore.FaceAttribute : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.FaceAspects : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.FaceImageQuality : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.HeadPoseAttribute : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.HeadPose : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.Wearables : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.Glasses : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.Expression : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.EyesExpression : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension DotFaceCore.FaceQuality : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}








extension DotCore.PointDouble : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}

@_Concurrency.MainActor @preconcurrency public struct WalletPayDetailsModalView : SwiftUICore.View {
  @SwiftUICore.Binding @_projectedValueProperty($isPresented) @_Concurrency.MainActor @preconcurrency public var isPresented: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    nonmutating _modify
  }
  @_Concurrency.MainActor @preconcurrency public var $isPresented: SwiftUICore.Binding<Swift.Bool> {
    get
  }
  @_Concurrency.MainActor @preconcurrency public let balance: Swift.Double
  @_Concurrency.MainActor @preconcurrency public let params: StaqWallet.WalletPayParams
  @_Concurrency.MainActor @preconcurrency public var didDismiss: (() -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var didTapConfirm: ((_ dismiss: () -> Swift.Void) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B19PayDetailsModalViewV4bodyQrvp", 0) __
}

@_hasMissingDesignatedInitializers final public class AppFlowCoordinator : StaqWallet.BaseFlowCoordinator {
  public init(_ navigationController: UIKit.UINavigationController? = nil, config: StaqWallet.StaqWalletConfig)
  @objc deinit
  final public func start()
}









extension DotDocument.DetectionPosition : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}


public struct WalletPayParams {
  public init(totalAmount: Swift.Double, subtotalAmount: Swift.Double, currencyCode: Swift.String = "SAR", fees: Swift.Double, productId: Swift.String, sku: Swift.String, narative: Swift.String?)
}
@_hasMissingDesignatedInitializers final public class SecurityService {
  public static func checkSecurity()
  @objc deinit
}






@_Concurrency.MainActor @preconcurrency public struct WalletPayView : SwiftUICore.View {
  public enum Variant {
    case inline
    case breakdown
    public static func == (a: StaqWallet.WalletPayView.Variant, b: StaqWallet.WalletPayView.Variant) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B7PayViewV4bodyQrvp", 0) __
}






extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func endEditing()
  @_Concurrency.MainActor @preconcurrency public var foregroundActiveScene: UIKit.UIWindowScene? {
    get
  }
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency public func pushVC(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func popViewController(animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func popToViewController(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
}
public struct DocumentInspectionResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorCode : Swift.Codable {
  case noCorners
  case faceDoesNotMatchPreviousDocument
  case networkError
  public static func == (a: StaqWallet.ErrorCode, b: StaqWallet.ErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCustomerResponse : Swift.Codable {
  public let customer: StaqWallet.Customer
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Customer : Swift.Codable {
  public let age: StaqWallet.BioMetricMultiValueAttribute?
  public let gender: StaqWallet.BioMetricMultiValueAttribute?
  public let givenNames: StaqWallet.MultiValueAttribute?
  public let surname: StaqWallet.MultiValueAttribute?
  public let fullName: StaqWallet.MultiValueAttribute?
  public let dateOfBirth: StaqWallet.MultiValueAttribute?
  public let personalNumber: StaqWallet.MultiValueAttribute?
  public let citizenship: StaqWallet.MultiValueAttribute?
  public let nationality: StaqWallet.MultiValueAttribute?
  public let document: StaqWallet.CustomerDocumentLinks?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerDocumentLinks : Swift.Codable {
  public let type: StaqWallet.DocumentTypeCustomer?
  public let pageTypes: [Swift.String]?
  public let dateOfIssue: StaqWallet.MultiValueAttribute?
  public let dateOfExpiry: StaqWallet.MultiValueAttribute?
  public let documentNumber: StaqWallet.MultiValueAttribute?
  public let issuingAuthority: StaqWallet.MultiValueAttribute?
  public let additionalTexts: [Swift.String : StaqWallet.MultiValueAttributeWithoutMrz]?
  public let mrz: StaqWallet.Mrz?
  public let links: StaqWallet.CustomerDocumentLinksCustomerDocumentLinks
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerDocumentLinksCustomerDocumentLinks : Swift.Codable {
  public let portrait: Swift.String?
  public let ghostPortrait: Swift.String?
  public let signature: Swift.String?
  public let fingerprint: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentTypeCustomer : Swift.Codable {
  public let country: Swift.String?
  public let edition: Swift.String?
  public let type: Swift.String?
  public let machineReadableTravelDocument: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BioMetricMultiValueAttribute : Swift.Codable {
  public let visualZone: Swift.String?
  public let mrz: Swift.String?
  public let selfie: Swift.String?
  public let documentPortrait: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiValueAttributeWithoutMrz : Swift.Codable {
  public let visualZone: Swift.String?
  public let barcode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiValueAttribute : Swift.Codable {
  public let mrz: Swift.String?
  public let visualZone: Swift.String?
  public let barcode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Mrz : Swift.Codable {
  public let td1: StaqWallet.Td?
  public let td2: StaqWallet.Td?
  public let td3: StaqWallet.Td?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Td : Swift.Codable {
  public let documentCode: Swift.String
  public let issuingAuthority: Swift.String
  public let surname: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let dateOfBirth: Swift.String
  public let gender: Swift.String
  public let dateOfExpiry: Swift.String
  public let optionalDataFirstLine: Swift.String?
  public let optionalDataSecondLine: Swift.String?
  public let personalNumberOrOptionalDataSecondLine: Swift.String?
  public let checkDigitsValidity: StaqWallet.Td1MrzCheckValidity
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Td1MrzCheckValidity : Swift.Codable {
  public let documentNumberCheckDigitValid: Swift.Bool
  public let dateOfBirthCheckDigitValid: Swift.Bool
  public let dateOfExpiryCheckDigitValid: Swift.Bool
  public let compositeCheckDigitValid: Swift.Bool
  public let personalNumberCheckDigitValid: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ImageCrop : Swift.Codable {
  public let data: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateFaceResponse : Swift.Codable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceSimilarityResponse : Swift.Codable {
  public let score: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateTemplate : Swift.Codable {
  public let data: Swift.String
  public let version: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}

extension DotDocument.DocumentDetector.Document : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}

extension DotDocument.ImageParameters : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
extension UIKit.UIFont {
  public static func registerCustomFonts()
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}

@_hasMissingDesignatedInitializers public class BaseFlowCoordinator {
  @objc deinit
}

@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(animation: SwiftUICore.Animation = Self.defaultAnimation, gradient: SwiftUICore.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  @_Concurrency.MainActor @preconcurrency public static let defaultAnimation: SwiftUICore.Animation
  @_Concurrency.MainActor @preconcurrency public static let defaultGradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency public func body(content: StaqWallet.Shimmer.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, animation: SwiftUICore.Animation = Shimmer.defaultAnimation, gradient: SwiftUICore.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use shimmering(active:animation:gradient:bandSize:) instead.")
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, duration: Swift.Double, bounce: Swift.Bool = false, delay: Swift.Double = 0.25) -> some SwiftUICore.View
  
}




extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var walletIdentifier: Swift.String? {
    get
    set
  }
}


extension DotCore.ImageSize : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}

@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UIWalletPayView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, isSelected: Swift.Bool, variant: StaqWallet.WalletPayView.Variant, balance: Swift.Double, params: StaqWallet.WalletPayParams)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func setSelected(_ isSelected: Swift.Bool)
  @objc deinit
}
public enum WalletPayPresenter {
  public static func presentPaymentDetails(from parent: UIKit.UIViewController, balance: Swift.Double, params: StaqWallet.WalletPayParams, didDismiss: (() -> Swift.Void)? = nil, didTapConfirm: ((_ dismiss: () -> Swift.Void) -> Swift.Void)? = nil)
}
extension DotCore.BgraRawImage : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}






extension DotDocument.DocumentAutoCaptureResult : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
  final public func readDocumentFields()
}


extension StaqWallet.StaqWalletEnvironment : Swift.Equatable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.Equatable {}
extension StaqWallet.SupportedLanguage : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.RawRepresentable {}
extension StaqWallet.BaeErrorCodes : Swift.Equatable {}
extension StaqWallet.BaeErrorCodes : Swift.Hashable {}
extension StaqWallet.WalletPayDetailsModalView : Swift.Sendable {}
extension StaqWallet.WalletPayView : Swift.Sendable {}
extension StaqWallet.WalletPayView.Variant : Swift.Equatable {}
extension StaqWallet.WalletPayView.Variant : Swift.Hashable {}
extension StaqWallet.ErrorCode : Swift.Equatable {}
extension StaqWallet.ErrorCode : Swift.Hashable {}
extension StaqWallet.Shimmer : Swift.Sendable {}
