// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name StaqWallet
import SystemConfiguration.CaptiveNetwork
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import NetworkExtension
@_exported import StaqWallet
import Swift
import SwiftUI
import SystemConfiguration
import TrustlessSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum StaqWalletEnvironment {
  case development
  case production
  public static func == (a: StaqWallet.StaqWalletEnvironment, b: StaqWallet.StaqWalletEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TrustlessSDK.TrustlessError : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}



public struct StaqWalletConfig {
  public init(userId: Swift.String, secret: Swift.String, email: Swift.String? = nil, mobileNumber: Swift.String? = nil, language: StaqWallet.SupportedLanguage, googleMapsApiKey: Swift.String, walletEnv: StaqWallet.StaqWalletEnvironment = .production)
}













public enum SupportedLanguage : Swift.String {
  case en
  case ar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
final public class AppFlowCoordinator {
  public init(config: StaqWallet.StaqWalletConfig)
  final public func start()
  @objc deinit
}


extension TrustlessSDK.Card : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
extension TrustlessSDK.CardTransaction : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}








@_hasMissingDesignatedInitializers final public class SecurityService {
  public static func checkSecurity()
  @objc deinit
}
final public class ClosedWalletAppCoordinator {
  public init(rootVC: UIKit.UINavigationController, withConfigs configs: StaqWallet.StaqWalletConfig)
  public enum Action {
    case start
    case betaProgram
    case notice
    public static func == (a: StaqWallet.ClosedWalletAppCoordinator.Action, b: StaqWallet.ClosedWalletAppCoordinator.Action) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public func start()
  @objc deinit
}


extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public func endEditing()
  @_Concurrency.MainActor(unsafe) public var foregroundActiveScene: UIKit.UIWindowScene? {
    get
  }
}
extension UIKit.UIApplication : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) public func pushVC(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func popViewController(animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func popToViewController(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void)
}

public struct Shimmer : SwiftUI.ViewModifier {
  public init(animation: SwiftUI.Animation = Self.defaultAnimation, gradient: SwiftUI.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  public static let defaultAnimation: SwiftUI.Animation
  public static let defaultGradient: SwiftUI.Gradient
  @_Concurrency.MainActor(unsafe) public func body(content: StaqWallet.Shimmer.Content) -> some SwiftUI.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUI.View {
  public func shimmering(active: Swift.Bool = true, animation: SwiftUI.Animation = Shimmer.defaultAnimation, gradient: SwiftUI.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUI.View
  
  @available(*, deprecated, message: "Use shimmering(active:animation:gradient:bandSize:) instead.")
  public func shimmering(active: Swift.Bool = true, duration: Swift.Double, bounce: Swift.Bool = false, delay: Swift.Double = 0.25) -> some SwiftUI.View
  
}











extension StaqWallet.StaqWalletEnvironment : Swift.Equatable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.Equatable {}
extension StaqWallet.SupportedLanguage : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.RawRepresentable {}
extension StaqWallet.ClosedWalletAppCoordinator.Action : Swift.Equatable {}
extension StaqWallet.ClosedWalletAppCoordinator.Action : Swift.Hashable {}
