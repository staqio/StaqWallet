// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios15.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -enable-bare-slash-regex -module-name StaqWallet
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import Combine
import CommonCrypto
import DeveloperToolsSupport
import DotCore
import DotDocument
import DotFaceBackgroundUniformity
import DotFaceCore
import DotFaceDetectionFast
import DotFaceExpressionNeutral
import Foundation
import LocalAuthentication
import NetworkExtension
import PassKit
@_exported import StaqWallet
import Swift
import SwiftUI
import SystemConfiguration
import TrustlessSDK
import UIKit
import WebKit
import _Concurrency
import _PassKit_SwiftUI
import _StringProcessing
import _SwiftConcurrencyShims









public enum SupportedLanguage : Swift.String {
  case en
  case ar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}





@_hasMissingDesignatedInitializers public class KycSDKApi {
  public var sdkErrors: StaqWallet.KycSDKErrors {
    get
  }
  public var sdkState: StaqWallet.KycSDKState {
    get
  }
  public func similarity() throws -> Swift.Bool
  public func similarityAsync(completion: @escaping (Swift.Result<Swift.Bool, StaqWallet.BaeError>) -> Swift.Void)
  public func getSelfiePhoto() throws -> StaqWallet.ImageCrop
  public func getDocumentPortrait() throws -> StaqWallet.ImageCrop
  public func getDocumentPortraitAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentBackCrop() throws -> StaqWallet.ImageCrop
  public func getDocumentBackCropAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentFrontCrop() throws -> StaqWallet.ImageCrop
  public func getDocumentFrontCropAsync(completion: @escaping (Swift.Result<StaqWallet.ImageCrop, StaqWallet.BaeError>) -> Swift.Void)
  public func getDocumentFields() throws -> StaqWallet.GetCustomerResponse
  public func getDocument() throws -> StaqWallet.KYCDocumentData
  public func getDocumentFieldsAsync(completion: @escaping (Swift.Result<StaqWallet.GetCustomerResponse, StaqWallet.BaeError>) -> Swift.Void)
  public func inspectDocuments() throws -> StaqWallet.DocumentInspectionResponse
  public func inspectDocumentsAsync(completion: @escaping (Swift.Result<StaqWallet.DocumentInspectionResponse, StaqWallet.BaeError>) -> Swift.Void)
  public func awaitForQueueToFinish()
  public func removeCustomerID()
  @objc deinit
}
public struct KycSDKErrors {
  public var frontScanError: StaqWallet.BaeError?
  public var backScanError: StaqWallet.BaeError?
  public var selfieCaptureError: StaqWallet.BaeError?
  public var initializationError: StaqWallet.BaeError?
}
public struct KycSDKState {
  public var frontScan: Foundation.Data?
  public var backScan: Foundation.Data?
  public var selfieScan: Foundation.Data?
  public var video: Foundation.URL?
}
public struct KYCDocumentData : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}

@_hasMissingDesignatedInitializers final public class StaqWalletManager {
  public static func initialize(withConfig config: StaqWallet.StaqWalletConfig)
  public static func start(forUser userConfig: StaqWallet.StaqWalletUser, fromNavigationController rootNavigationController: UIKit.UINavigationController)
  public static func setPackagesNavigationCallback(_ callback: @escaping () -> Swift.Void)
  public static func setLanguage(_ language: StaqWallet.SupportedLanguage)
  @objc deinit
}



@_hasMissingDesignatedInitializers public class BaeError : Foundation.LocalizedError {
  final public var code: StaqWallet.BaeErrorCodes
  final public var message: Swift.String
  public var errorDescription: Swift.String? {
    get
  }
  @objc deinit
}
public enum BaeErrorCodes {
  case UNKNOWN_ERROR
  case NO_FILE_SELECTED
  case CAMERA_NOT_FOUND
  case NOT_ABLE_TO_RECORD_VIDEO
  case NOT_ABLE_TO_READ_FILE
  case NOT_ABLE_TO_MAKE_REQUEST
  case VIDEO_EXCEEDS_LENGTH
  case NOT_INITIALIZED
  case NO_CARD_CORNERS_DETECTED
  case PAGE_DOESNT_MATCH_DOCUMENT_TYPE_OF_PREVIOUS_PAGE
  case NO_FACE_FOUND
  case USER_DID_NOT_SCAN_HIS_FACE
  case TIMEOUT
  case CANCELED
  public static func == (a: StaqWallet.BaeErrorCodes, b: StaqWallet.BaeErrorCodes) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}

#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.FaceAttribute : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.FaceAttribute : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.FaceAspects : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.FaceAspects : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.FaceImageQuality : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.FaceImageQuality : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.HeadPoseAttribute : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.HeadPoseAttribute : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.HeadPose : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.HeadPose : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.Wearables : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.Wearables : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.Glasses : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.Glasses : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.Expression : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.Expression : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.EyesExpression : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.EyesExpression : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotFaceCore.FaceQuality : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotFaceCore.FaceQuality : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif









#if compiler(>=5.3) && $RetroactiveAttribute
extension DotCore.PointDouble : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotCore.PointDouble : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif



@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AppFlowCoordinator : StaqWallet.BaseFlowCoordinator {
  final public func start(forUser user: StaqWallet.StaqWalletUser, withConfig config: StaqWallet.StaqWalletConfig)
  @objc deinit
}












#if compiler(>=5.3) && $RetroactiveAttribute
extension DotDocument.DetectionPosition : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotDocument.DetectionPosition : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif



@_hasMissingDesignatedInitializers final public class SecurityService {
  public static func checkSecurity()
  @objc deinit
}







public struct DocumentInspectionResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceResponse : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum ErrorCode : Swift.Codable {
  case noCorners
  case faceDoesNotMatchPreviousDocument
  case networkError
  public static func == (a: StaqWallet.ErrorCode, b: StaqWallet.ErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct GetCustomerResponse : Swift.Codable {
  public let customer: StaqWallet.Customer
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Customer : Swift.Codable {
  public let age: StaqWallet.BioMetricMultiValueAttribute?
  public let gender: StaqWallet.BioMetricMultiValueAttribute?
  public let givenNames: StaqWallet.MultiValueAttribute?
  public let surname: StaqWallet.MultiValueAttribute?
  public let fullName: StaqWallet.MultiValueAttribute?
  public let dateOfBirth: StaqWallet.MultiValueAttribute?
  public let personalNumber: StaqWallet.MultiValueAttribute?
  public let citizenship: StaqWallet.MultiValueAttribute?
  public let nationality: StaqWallet.MultiValueAttribute?
  public let document: StaqWallet.CustomerDocumentLinks?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerDocumentLinks : Swift.Codable {
  public let type: StaqWallet.DocumentTypeCustomer?
  public let pageTypes: [Swift.String]?
  public let dateOfIssue: StaqWallet.MultiValueAttribute?
  public let dateOfExpiry: StaqWallet.MultiValueAttribute?
  public let documentNumber: StaqWallet.MultiValueAttribute?
  public let issuingAuthority: StaqWallet.MultiValueAttribute?
  public let additionalTexts: [Swift.String : StaqWallet.MultiValueAttributeWithoutMrz]?
  public let mrz: StaqWallet.Mrz?
  public let links: StaqWallet.CustomerDocumentLinksCustomerDocumentLinks
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CustomerDocumentLinksCustomerDocumentLinks : Swift.Codable {
  public let portrait: Swift.String?
  public let ghostPortrait: Swift.String?
  public let signature: Swift.String?
  public let fingerprint: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct DocumentTypeCustomer : Swift.Codable {
  public let country: Swift.String?
  public let edition: Swift.String?
  public let type: Swift.String?
  public let machineReadableTravelDocument: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct BioMetricMultiValueAttribute : Swift.Codable {
  public let visualZone: Swift.String?
  public let mrz: Swift.String?
  public let selfie: Swift.String?
  public let documentPortrait: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiValueAttributeWithoutMrz : Swift.Codable {
  public let visualZone: Swift.String?
  public let barcode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct MultiValueAttribute : Swift.Codable {
  public let mrz: Swift.String?
  public let visualZone: Swift.String?
  public let barcode: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Mrz : Swift.Codable {
  public let td1: StaqWallet.Td?
  public let td2: StaqWallet.Td?
  public let td3: StaqWallet.Td?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Td : Swift.Codable {
  public let documentCode: Swift.String
  public let issuingAuthority: Swift.String
  public let surname: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationality: Swift.String
  public let dateOfBirth: Swift.String
  public let gender: Swift.String
  public let dateOfExpiry: Swift.String
  public let optionalDataFirstLine: Swift.String?
  public let optionalDataSecondLine: Swift.String?
  public let personalNumberOrOptionalDataSecondLine: Swift.String?
  public let checkDigitsValidity: StaqWallet.Td1MrzCheckValidity
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Td1MrzCheckValidity : Swift.Codable {
  public let documentNumberCheckDigitValid: Swift.Bool
  public let dateOfBirthCheckDigitValid: Swift.Bool
  public let dateOfExpiryCheckDigitValid: Swift.Bool
  public let compositeCheckDigitValid: Swift.Bool
  public let personalNumberCheckDigitValid: Swift.Bool?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct ImageCrop : Swift.Codable {
  public let data: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateFaceResponse : Swift.Codable {
  public let id: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct FaceSimilarityResponse : Swift.Codable {
  public let score: Swift.Double
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct CreateTemplate : Swift.Codable {
  public let data: Swift.String
  public let version: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}

#if compiler(>=5.3) && $RetroactiveAttribute
extension DotDocument.DocumentDetector.Document : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotDocument.DocumentDetector.Document : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif

public enum StaqKYCEnvironment {
  case sandbox
  case debug
  case release
  public static func == (a: StaqWallet.StaqKYCEnvironment, b: StaqWallet.StaqKYCEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class LocalWalletConfig {
  public static let shared: StaqWallet.LocalWalletConfig
  final public var isEnabledLocalWallet: Swift.Bool
  @objc deinit
}
public class StaqWalletConfig {
  public init(language: StaqWallet.SupportedLanguage, merchantIdentifier: Swift.String, walletEnv: StaqWallet.StaqWalletEnvironment = .production, kycEnv: StaqWallet.StaqKYCEnvironment = .release)
  @objc deinit
}
public enum StaqWalletEnvironment {
  case development
  case production
  public static func == (a: StaqWallet.StaqWalletEnvironment, b: StaqWallet.StaqWalletEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Swift.Array {
  public func prefixThrough(_ index: Swift.Int) -> [Element]
}






@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UIWalletPayView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var balance: Swift.Double? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, variant: StaqWallet.WalletPayViewType, state: StaqWallet.WalletPayViewState, params: StaqWallet.StaqWalletPay.PaymentOrderParams)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func setBalance(_ balance: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func setSelected(_ isSelected: Swift.Bool)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct WalletPayDetailsModalView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, balance: Swift.Double, params: StaqWallet.StaqWalletPay.PaymentOrderParams, didDismiss: (() -> Swift.Void)? = nil, didTapConfirm: ((_ dismiss: @escaping () -> Swift.Void) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B19PayDetailsModalViewV4bodyQrvp", 0) __
}
public enum WalletPayViewType {
  case inline
  case breakdown
  public static func == (a: StaqWallet.WalletPayViewType, b: StaqWallet.WalletPayViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct WalletPayView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(variant: StaqWallet.WalletPayViewType, state: StaqWallet.WalletPayViewState, params: StaqWallet.StaqWalletPay.PaymentOrderParams)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B7PayViewV4bodyQrvp", 0) __
}

final public class WalletPayViewState : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($isSelected) final public var isSelected: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $isSelected: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($balance) final public var balance: Swift.Double? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $balance: Combine.Published<Swift.Double?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(isSelected: Swift.Bool = false, balance: Swift.Double? = nil)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class StaqWalletPay {
  public static func presentWalletPayDetails(from parent: UIKit.UIViewController, balance: Swift.Double, params: StaqWallet.StaqWalletPay.PaymentOrderParams, didDismiss: (() -> Swift.Void)? = nil, didTapConfirm: ((_ dismiss: () -> Swift.Void) -> Swift.Void)? = nil)
  public static func getWalletBalance(forUser userConfig: StaqWallet.StaqWalletUser) async throws -> Swift.Double
  public static func createPaymentOrder(forUser userConfig: StaqWallet.StaqWalletUser, params: StaqWallet.StaqWalletPay.PaymentOrderParams) async throws -> TrustlessSDK.CreatePaymentOrderResponse
  public static func getPaymentOrderDetails(forUser userConfig: StaqWallet.StaqWalletUser, orderId: Swift.String) async throws -> TrustlessSDK.PaymentOrderDetails
  @objc deinit
}
extension StaqWallet.StaqWalletPay {
  public enum WalletPayError : Foundation.LocalizedError {
    case notInitialized
    case notLoggedIn
    case walletNotAvailable
    case server(code: Swift.String, message: Swift.String)
    case unexpected
    public var errorDescription: Swift.String? {
      get
    }
  }
  public struct PaymentOrderParams {
    public let idempotencyKey: Swift.String
    public let externalId: Swift.String?
    public let totalAmount: Swift.Double
    public let feesAmount: Swift.Double?
    public let taxAmount: Swift.Double?
    public let currency: Swift.String
    public let supplierId: Swift.String
    public let metaData: [Swift.String : Swift.String]
    public init(idempotencyKey: Swift.String = UUID().uuidString, externalId: Swift.String? = nil, totalAmount: Swift.Double, feesAmount: Swift.Double? = nil, taxAmount: Swift.Double? = nil, supplierId: Swift.String, metaData: [Swift.String : Swift.String] = [:])
  }
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.Card : @retroactive Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
#else
extension TrustlessSDK.Card : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.CardTransaction : @retroactive Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}
#else
extension TrustlessSDK.CardTransaction : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.TrustlessError : @retroactive Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
#else
extension TrustlessSDK.TrustlessError : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
#endif
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public func endEditing()
  @_Concurrency.MainActor @preconcurrency public var foregroundActiveScene: UIKit.UIWindowScene? {
    get
  }
}
extension UIKit.UIFont {
  public static func registerCustomFonts()
  public static func displayAllFonts()
}
extension UIKit.UIFont {
  public static func registerFont(named filename: Swift.String, bundle: Foundation.Bundle)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency public func pushVC(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func popViewController(animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func popToViewController(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var walletIdentifier: Swift.String? {
    get
    set
  }
}
public class StaqWalletUser {
  final public let userId: Swift.String
  final public let secret: Swift.String
  final public let userType: Swift.String
  final public let nationalID: Swift.String
  final public let email: Swift.String
  public init(userId: Swift.String, secret: Swift.String, userType: Swift.String, nationalID: Swift.String, email: Swift.String)
  @objc deinit
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotDocument.ImageParameters : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotDocument.ImageParameters : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif


@_hasMissingDesignatedInitializers public class BaseFlowCoordinator {
  @objc deinit
}

@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(animation: SwiftUICore.Animation = Self.defaultAnimation, gradient: SwiftUICore.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  @_Concurrency.MainActor @preconcurrency public static let defaultAnimation: SwiftUICore.Animation
  @_Concurrency.MainActor @preconcurrency public static let defaultGradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency public func body(content: StaqWallet.Shimmer.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, animation: SwiftUICore.Animation = Shimmer.defaultAnimation, gradient: SwiftUICore.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUICore.View
  
  @available(*, deprecated, message: "Use shimmering(active:animation:gradient:bandSize:) instead.")
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, duration: Swift.Double, bounce: Swift.Bool = false, delay: Swift.Double = 0.25) -> some SwiftUICore.View
  
}





#if compiler(>=5.3) && $RetroactiveAttribute
extension DotCore.ImageSize : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotCore.ImageSize : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension DotCore.BgraRawImage : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotCore.BgraRawImage : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif

extension TrustlessSDK.AccountTransaction {
  public static func transactionDetails() -> TrustlessSDK.AccountTransaction?
}






#if compiler(>=5.3) && $RetroactiveAttribute
extension DotDocument.DocumentAutoCaptureResult : @retroactive Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#else
extension DotDocument.DocumentAutoCaptureResult : Swift.Encodable {
  final public func encode(to encoder: any Swift.Encoder) throws
}
#endif




extension StaqWallet.SupportedLanguage : Swift.Equatable {}
extension StaqWallet.SupportedLanguage : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.RawRepresentable {}
extension StaqWallet.BaeErrorCodes : Swift.Equatable {}
extension StaqWallet.BaeErrorCodes : Swift.Hashable {}
extension StaqWallet.ErrorCode : Swift.Equatable {}
extension StaqWallet.ErrorCode : Swift.Hashable {}
extension StaqWallet.StaqKYCEnvironment : Swift.Equatable {}
extension StaqWallet.StaqKYCEnvironment : Swift.Hashable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Equatable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Hashable {}
extension StaqWallet.WalletPayDetailsModalView : Swift.Sendable {}
extension StaqWallet.WalletPayViewType : Swift.Equatable {}
extension StaqWallet.WalletPayViewType : Swift.Hashable {}
extension StaqWallet.WalletPayView : Swift.Sendable {}
extension StaqWallet.Shimmer : Swift.Sendable {}
