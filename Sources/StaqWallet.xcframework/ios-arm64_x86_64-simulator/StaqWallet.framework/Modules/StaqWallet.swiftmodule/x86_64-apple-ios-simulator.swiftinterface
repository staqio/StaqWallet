// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name StaqWallet
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import AudioToolbox
import SystemConfiguration.CaptiveNetwork
import Combine
import CommonCrypto
import DeveloperToolsSupport
import DocumentReader
import FaceSDK
import Foundation
import LocalAuthentication
import NetworkExtension
import PassKit
import Security
@_exported import StaqWallet
import Swift
import SwiftUI
import SystemConfiguration
import TrustlessSDK
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims







@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class UIWalletPayView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var isSelected: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var balance: Swift.Double? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, variant: StaqWallet.WalletPayViewType, state: StaqWallet.WalletPayViewState, params: StaqWallet.StaqWalletPay.PaymentOrderParams)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func setBalance(_ balance: Swift.Double)
  @_Concurrency.MainActor @preconcurrency public func setSelected(_ isSelected: Swift.Bool)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct WalletPayDetailsModalView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isPresented: SwiftUICore.Binding<Swift.Bool>, balance: Swift.Double, params: StaqWallet.StaqWalletPay.PaymentOrderParams, didDismiss: (() -> Swift.Void)? = nil, didTapConfirm: ((_ dismiss: @escaping () -> Swift.Void) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B19PayDetailsModalViewV4bodyQrvp", 0) __
}
public enum WalletPayViewType {
  case inline
  case breakdown
  public static func == (a: StaqWallet.WalletPayViewType, b: StaqWallet.WalletPayViewType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct WalletPayView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(variant: StaqWallet.WalletPayViewType, state: StaqWallet.WalletPayViewState, params: StaqWallet.StaqWalletPay.PaymentOrderParams)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet0B7PayViewV4bodyQrvp", 0) __
}

final public class WalletPayViewState : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($isSelected) final public var isSelected: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $isSelected: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($balance) final public var balance: Swift.Double? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $balance: Combine.Published<Swift.Double?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(isSelected: Swift.Bool = false, balance: Swift.Double? = nil)
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class StaqWalletPay {
  public static func presentWalletPayDetails(from parent: UIKit.UIViewController, balance: Swift.Double, params: StaqWallet.StaqWalletPay.PaymentOrderParams, didDismiss: (() -> Swift.Void)? = nil, didTapConfirm: ((_ dismiss: () -> Swift.Void) -> Swift.Void)? = nil)
  public static func registerUser(withConfig userConfig: StaqWallet.StaqWalletUser) async throws
  public static func getWalletBalance(forUser userConfig: StaqWallet.StaqWalletUser) async throws -> Swift.Double
  public static func createPaymentOrder(forUser userConfig: StaqWallet.StaqWalletUser, params: StaqWallet.StaqWalletPay.PaymentOrderParams) async throws -> TrustlessSDK.CreatePaymentOrderResponse
  public static func getPaymentOrderDetails(forUser userConfig: StaqWallet.StaqWalletUser, orderId: Swift.String) async throws -> TrustlessSDK.PaymentOrderDetails
  @objc deinit
}
extension StaqWallet.StaqWalletPay {
  public enum WalletPayError : Foundation.LocalizedError {
    case notInitialized
    case notLoggedIn
    case walletNotAvailable
    case server(code: Swift.String, message: Swift.String)
    case unexpected
    public var errorDescription: Swift.String? {
      get
    }
  }
  public struct PaymentOrderParams {
    public let idempotencyKey: Swift.String
    public let externalId: Swift.String?
    public let totalAmount: Swift.Double
    public let feesAmount: Swift.Double?
    public let taxAmount: Swift.Double?
    public let currency: Swift.String
    public let supplierId: Swift.String
    public let metaData: [Swift.String : Swift.String]
    public init(idempotencyKey: Swift.String = UUID().uuidString, externalId: Swift.String? = nil, totalAmount: Swift.Double, feesAmount: Swift.Double? = nil, taxAmount: Swift.Double? = nil, supplierId: Swift.String, metaData: [Swift.String : Swift.String] = [:])
  }
}





public enum SupportedLanguage : Swift.String {
  case en
  case ar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}

extension Swift.Array {
  public func prefixThrough(_ index: Swift.Int) -> [Element]
}
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.Card : @retroactive Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
#else
extension TrustlessSDK.Card : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.Card, rhs: TrustlessSDK.Card) -> Swift.Bool
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.CardTransaction : @retroactive Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}
#else
extension TrustlessSDK.CardTransaction : Swift.Equatable {
  public static func == (lhs: TrustlessSDK.CardTransaction, rhs: TrustlessSDK.CardTransaction) -> Swift.Bool
}
#endif
#if compiler(>=5.3) && $RetroactiveAttribute
extension TrustlessSDK.TrustlessError : @retroactive Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
#else
extension TrustlessSDK.TrustlessError : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias ID = Swift.String
}
#endif
extension UIKit.UIApplication {
  @_Concurrency.MainActor @preconcurrency public var foregroundActiveScene: UIKit.UIWindowScene? {
    get
  }
}
extension UIKit.UIFont {
  public static func registerCustomFonts()
}
extension UIKit.UIFont {
  public static func registerFont(name: Swift.String, bundle: Foundation.Bundle)
}
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency public func pushVC(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func popViewController(animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
  @_Concurrency.MainActor @preconcurrency public func popToViewController(_ vc: UIKit.UIViewController, animated: Swift.Bool = true, completion: @escaping () -> Swift.Void = {})
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var walletIdentifier: Swift.String? {
    get
    set
  }
}




@_hasMissingDesignatedInitializers final public class StaqWalletManager {
  public static func initialize(withConfig config: StaqWallet.StaqWalletConfig)
  public static func start(forUser user: StaqWallet.StaqWalletUser, withLanguage language: StaqWallet.SupportedLanguage, fromNavigationController rootNC: UIKit.UINavigationController)
  public static func setPackagesNavigationCallback(_ callback: @escaping () -> Swift.Void)
  @objc deinit
}
extension StaqWallet.StaqWalletManager : TrustlessSDK.TrustlessDelegate {
  final public func didSessionExpired()
}


























@_hasMissingDesignatedInitializers final public class KeychainService {
  @objc deinit
}
extension StaqWallet.KeychainService {
  public enum Biometry {
    case none
    case faceId
    case passcode(code: Swift.String)
  }
  public static func enableFaceID(_ isEnabled: Swift.Bool)
  public static var isEnabledFaceID: Swift.Bool {
    get
  }
  public static func savePassCode(_ passCode: Swift.String)
  public static func saveBiometryAuth(type: StaqWallet.KeychainService.Biometry)
  public static func getAppPassCode() -> Swift.String?
  public static func getBiometryAuthType() -> StaqWallet.KeychainService.Biometry
  public static func clearPasscodeAndBiometry()
}


@_Concurrency.MainActor @preconcurrency public struct Shimmer : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(animation: SwiftUICore.Animation = Self.defaultAnimation, gradient: SwiftUICore.Gradient = Self.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3)
  @_Concurrency.MainActor @preconcurrency public static let defaultAnimation: SwiftUICore.Animation
  @_Concurrency.MainActor @preconcurrency public static let defaultGradient: SwiftUICore.Gradient
  @_Concurrency.MainActor @preconcurrency public func body(content: StaqWallet.Shimmer.Content) -> some SwiftUICore.View
  
  @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
  public typealias Body = @_opaqueReturnTypeOf("$s10StaqWallet7ShimmerV4body7contentQr7SwiftUI21_ViewModifier_ContentVyACG_tF", 0) __
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shimmering(active: Swift.Bool = true, animation: SwiftUICore.Animation = Shimmer.defaultAnimation, gradient: SwiftUICore.Gradient = Shimmer.defaultGradient, bandSize: CoreFoundation.CGFloat = 0.3) -> some SwiftUICore.View
  
}
public struct StaqWalletConfig {
  public init(merchantIdentifier: Swift.String, walletEnv: StaqWallet.StaqWalletEnvironment = .production)
}
public enum StaqWalletEnvironment {
  case development
  case production
  public static func == (a: StaqWallet.StaqWalletEnvironment, b: StaqWallet.StaqWalletEnvironment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct StaqWalletUser {
  public let userId: Swift.String
  public let secret: Swift.String
  public let userType: Swift.String
  public let nationalID: Swift.String
  public let email: Swift.String
  public init(userId: Swift.String, secret: Swift.String, userType: Swift.String, nationalID: Swift.String, email: Swift.String)
}










extension StaqWallet.WalletPayDetailsModalView : Swift.Sendable {}
extension StaqWallet.WalletPayViewType : Swift.Equatable {}
extension StaqWallet.WalletPayViewType : Swift.Hashable {}
extension StaqWallet.WalletPayView : Swift.Sendable {}
extension StaqWallet.SupportedLanguage : Swift.Equatable {}
extension StaqWallet.SupportedLanguage : Swift.Hashable {}
extension StaqWallet.SupportedLanguage : Swift.RawRepresentable {}
extension StaqWallet.Shimmer : Swift.Sendable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Equatable {}
extension StaqWallet.StaqWalletEnvironment : Swift.Hashable {}
